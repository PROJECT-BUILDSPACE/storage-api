definitions:
  models.AccordionOpts:
    properties:
      openGroups: {}
      searchable:
        type: boolean
    type: object
  models.Bucket:
    properties:
      _id:
        type: string
      creation_date:
        type: string
      name:
        type: string
    type: object
  models.CoordRange:
    properties:
      max:
        type: integer
      min:
        type: integer
    type: object
  models.Coords:
    properties:
      default:
        type: integer
      precision:
        type: integer
      range:
        $ref: '#/definitions/models.CoordRange'
    type: object
  models.CopernicusDetails:
    properties:
      error:
        allOf:
        - $ref: '#/definitions/models.CopernicusTaskError'
        description: Error details in case of status failed
      fingerprint:
        description: Fingerprint of the dataset (used to identify datasets based on
          request parameters)
        type: string
      sercice:
        description: Dataset's related service
        type: string
      status:
        description: Copernicus task status
        type: string
      task_id:
        description: Copernicus Task
        type: string
    type: object
  models.CopernicusInput:
    properties:
      body:
        additionalProperties: true
        description: Request body
        type: object
      datasetname:
        description: Name of specific Copernicus API
        type: string
    type: object
  models.CopernicusTaskError:
    properties:
      context:
        description: An arbitrary JSON object containing additional information for
          debugging
      message:
        description: Message to the user
        type: string
      permanent:
        description: If this is true then the request should not be retried unchanged
        type: boolean
      reason:
        description: Reason of Failure
        type: string
      url:
        description: A URI which is unique to a particular class of error
        type: string
      who:
        description: Is this a problem in the server or the request (server or client)?
        type: string
    type: object
  models.CopyMoveBody:
    properties:
      _id:
        description: ID of object (file or folder)
        type: string
      destination:
        description: ID of destination
        type: string
      new_name:
        description: ID of destination
        type: string
    type: object
  models.Details:
    properties:
      accordion:
        type: boolean
      accordionGroups:
        type: boolean
      accordionOptions:
        $ref: '#/definitions/models.AccordionOpts'
      changevisible:
        type: boolean
      columns:
        type: integer
      concat:
        type: string
      default:
        items: {}
        type: array
      displayaslist:
        type: boolean
      extentlabels:
        items:
          type: string
        type: array
      fields:
        items:
          $ref: '#/definitions/models.Fields'
        type: array
      fullheight:
        type: boolean
      groups:
        items: {}
        type: array
      id:
        type: integer
      information:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      latitude:
        $ref: '#/definitions/models.Coords'
      longitude:
        $ref: '#/definitions/models.Coords'
      maximumSelections:
        type: integer
      precision:
        type: integer
      projection:
        $ref: '#/definitions/models.Projection'
      range:
        $ref: '#/definitions/models.RangeLocal'
      text:
        type: string
      text:file:
        type: string
      values:
        items:
          type: string
        type: array
      withmap:
        type: boolean
      wrapping:
        type: boolean
    type: object
  models.ErrorReport:
    properties:
      internal_status:
        description: Status of the error
        type: string
      message:
        description: Message of the error
        type: string
      reason:
        description: Reason of the error
        type: string
      status:
        description: Status of the error
        type: integer
    type: object
  models.Fields:
    properties:
      comments:
        type: string
      maxlength:
        type: integer
      placeholder:
        type: string
      required:
        type: boolean
      type:
        type: string
    type: object
  models.File:
    properties:
      _id:
        description: File's id
        type: string
      ancestors:
        description: All ancestor folders
        items:
          type: string
        type: array
      copernicus_details:
        allOf:
        - $ref: '#/definitions/models.CopernicusDetails'
        description: Details related to Copernicus datasets
      file_type:
        description: The file's extention
        type: string
      folder:
        description: Parent folder of the file
        type: string
      meta:
        allOf:
        - $ref: '#/definitions/models.Meta'
        description: File's Metadata
      original_title:
        description: The file's title before uploading
        type: string
      size:
        type: integer
      total:
        type: integer
    type: object
  models.Folder:
    properties:
      _id:
        description: Folder's id
        type: string
      ancestors:
        description: Array of ancestors' ids
        items:
          type: string
        type: array
      files:
        description: Array of files' ids included
        items:
          type: string
        type: array
      folders:
        description: Array of folders' ids included
        items:
          type: string
        type: array
      level:
        description: Level of the folder (root is level 0 etc..)
        type: integer
      meta:
        allOf:
        - $ref: '#/definitions/models.Meta'
        description: Folder's Metadata
      parent:
        description: Parent's folder id
        type: string
      size:
        description: Size of a folder (cumulative size of folder's items)
        type: integer
    type: object
  models.FolderList:
    properties:
      files:
        description: Keys are file ids and values are the files' metadata
        items:
          $ref: '#/definitions/models.File'
        type: array
      folders:
        description: Keys are folder ids and values are the folders' metadata
        items:
          $ref: '#/definitions/models.Folder'
        type: array
    type: object
  models.Form:
    properties:
      css:
        type: string
      details:
        $ref: '#/definitions/models.Details'
      help:
        type: string
      label:
        type: string
      name:
        type: string
      required:
        type: boolean
      type:
        type: string
    type: object
  models.Meta:
    properties:
      creator:
        description: User's ID that created the file
        type: string
      date_creation:
        description: Date and time of creation
        type: string
      description:
        description: Array of descriptions for the file
        type: string
      read:
        description: Array of user ids with reading rights
        items:
          type: string
        type: array
      tags:
        description: Array of tags for the file
        items:
          type: string
        type: array
      title:
        description: Title of the file
        type: string
      update:
        allOf:
        - $ref: '#/definitions/models.Updated'
        description: Array with data that store the updates
      write:
        description: Array of user ids with writing rights
        items:
          type: string
        type: array
    type: object
  models.Projection:
    properties:
      id:
        type: integer
      overlay:
        type: boolean
      use:
        type: boolean
    type: object
  models.RangeLocal:
    properties:
      e:
        type: number
      "n":
        type: number
      s:
        type: number
      w:
        type: number
    type: object
  models.Updated:
    properties:
      date:
        description: Date and time of update
        type: string
      user:
        description: User's id that updated
        type: string
    type: object
info:
  contact:
    email: isotiropoulos@singularlogic.eu
    name: BUILDSPACE Core Platform Support
    url: http://www.swagger.io/support
  description: This is a swagger for the API that was developed as a core platform
    of the BUILDSPACE project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: BUILSPACE Core Platform Swagger API
  version: "1.0"
paths:
  /bucket:
    post:
      consumes:
      - application/json
      description: Use a Bucket model to create a new bucket.
      parameters:
      - description: Bucket payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Bucket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Bucket'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Create bucket.
      tags:
      - Buckets
  /bucket/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a bucket based on it's ID.
      parameters:
      - description: Bucket Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Bucket'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Delete bucket with all contents.
      tags:
      - Buckets
  /copernicus/{service}/dataset:
    post:
      consumes:
      - application/json
      description: |-
        The request can be specified by the body of the request using the parameters of the dataset.
        Please note that some parameters cannot be used with other. For the dataset parameters' rules consider the dataset's form.
      parameters:
      - description: Service (currently available 'ads' and 'cds')
        in: path
        name: service
        required: true
        type: string
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CopernicusInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "503":
          description: Service Anavailable
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Post a request for a specific dataset (create a Copernicus task that
        will make a dataset available for download).
      tags:
      - Copernicus
  /copernicus/{service}/dataset/{id}:
    get:
      description: |-
        This endpoint checks the status of a Copernicus task and if it is completed it downloads the file and stores it in MinIO (under the Copernicus public bucket).
        In case of uncompleted task, the response is a json specifying the current status.
      parameters:
      - description: Service (currently available 'ads' and 'cds')
        in: path
        name: service
        required: true
        type: string
      - description: ID of the dataset to be downloaded
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "503":
          description: Service Anavailable
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Download dataset (if the Copernicus task is completed).
      tags:
      - Copernicus
  /copernicus/{service}/getall:
    get:
      description: |-
        This is the endopoint to get a list of all available datasets of a service.
        Currently supported services are "ads" and "cds"
      parameters:
      - description: Service (currently available 'ads' and 'cds')
        in: path
        name: service
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "503":
          description: Service Anavailable
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Get a list of all available datasets related to a specific service.
      tags:
      - Copernicus
  /copernicus/{service}/getform/{id}:
    get:
      description: |-
        A form is a set of rules indicating which parameters are neccessary for the dataset to be retrieved.
        Please note that some parameters cannot be used with other. The selection rules are also included in the forms.
      parameters:
      - description: Service (currently available 'ads' and 'cds')
        in: path
        name: service
        required: true
        type: string
      - description: ID of the dataset of interest
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Form'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "503":
          description: Service Anavailable
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Get the form of a dataset that is related to a specific service.
      tags:
      - Copernicus
  /file:
    post:
      consumes:
      - application/json
      - application/octet-stream
      description: |-
        This is the endopoint to upload files. The files are uploaded using a multipart streaming upload.
        Step 1 is to select the content-type.
        - If **application/json** then the request will be sent to initialize the multipart upload. In this case user must pass a **File model as a payload** containing the **folder** and the **original_title** fields. User must also pass the **total** header to specify the number of parts that will be uploaded.
        - If **application/octet-stream** user must pass the **binary data** (decoded) in the body and also provide the **file ID** and part number parameters.
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          type: object
      - description: Total parts of multipart upload
        in: header
        name: total
        type: string
      - description: File ID
        in: path
        name: file
        type: string
      - description: Number of part
        in: query
        name: part
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Upload a file.
      tags:
      - Files
    put:
      consumes:
      - application/json
      description: |-
        This is the endopoint to update file meta data. Pass a models.File of the file that will be updated with the updates included.
        **Note** that this endpoint updates the meta data and not the file contents. To update file contents user must delete int and re-upload it.
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.File'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Update a file.
      tags:
      - Files
  /file/{id}:
    delete:
      description: This is the endopoint to delete files. The files are deleted based
        on ther id.
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Delete file by ID.
      tags:
      - Files
    get:
      description: |-
        This is the endopoint to get files. The files are downloaded using a **multipart streaming download**.
        User provies the file id as well as the part number and receives the decoded and decrypted bytes/
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      - description: Number of part
        in: query
        name: part
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Download a file.
      tags:
      - Files
  /folder:
    get:
      consumes:
      - application/json
      description: Get a folders meta data by the ID. Pass the ID in a query parameter.
      parameters:
      - description: Folder ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Folder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Get folder by id.
      tags:
      - Folders
    post:
      consumes:
      - application/json
      description: Use a Folder model as a payload to create a new folder. Essential
        fields are meta.title (folder's name) and parent (location).
      parameters:
      - description: Folder payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Folder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Bucket'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Create a new folder.
      tags:
      - Folders
    put:
      consumes:
      - application/json
      description: Update a folders meta data by the ID. Pass the Folder model with
        the updates that are needed.
      parameters:
      - description: Update body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Folder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Folder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Update folder by ID.
      tags:
      - Folders
  /folder/{id}:
    delete:
      consumes:
      - application/json
      description: Pass folder's id to delete it. Nested items (either files or folders)
        will be deleted as well.
      parameters:
      - description: Folder payload
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Folder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Delete folder by id.
      tags:
      - Folders
  /folder/copy:
    post:
      consumes:
      - application/json
      description: |-
        Copy a folder with all nested items.
        This endpoint is also used to share a folder with another organization.
      parameters:
      - description: Body with Copy details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CopyMoveBody'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/models.FolderList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Copy a folder and all nested files/folders.
      tags:
      - Folders
  /folder/list:
    get:
      consumes:
      - application/json
      description: Get lists of files and folders in a specific folder, by id. Result
        is a FolderList model
      parameters:
      - description: Folder ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FolderList'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorReport'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: List folder's items.
      tags:
      - Folders
  /info/file:
    get:
      description: Returns the metadata of a file by it's ID.
      parameters:
      - description: File ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorReport'
      security:
      - BearerAuth: []
      summary: Get metadata of file.
      tags:
      - Files
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
